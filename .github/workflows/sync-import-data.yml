name: '[Trigger] Sync & Import Data | Auth0 Tenants | FB Remote Config'

on:
  repository_dispatch:
    types: [test]
  workflow_dispatch:
    inputs:
      auth0_import_permission:
        description: "Import Permissions to AUTH0"
        required: true
        default: false
        type: boolean
      auth0_import_users:
        description: "Import Users to AUTH0"
        required: true
        default: false
        type: boolean
      auth0_delete_users_before_import:
        description: "Delete Users before AUTH0 Import"
        required: true
        default: false
        type: boolean
      auth0_sync_tenant:
        description: "Sync AUTH0 Tenants"
        required: true
        default: false
        type: boolean
      firebase_sync_rc:
        description: "Sync Firebase Remote Config"
        required: true
        default: false
        type: boolean
      auth0_source_tenant:
        description: 'Auth0 Source Tenant'
        required: true
        type: choice
        options:
          - DEV
          - STAGE
          - PROD
      auth0_dest_tenant:
        description: 'Auth0 Destination Tenant'
        required: true
        type: choice
        options:
          - DEV
          - STAGE
      firebase_source_env:
        description: 'Firebase Source Environment'
        required: true
        type: choice
        options:
          - STAGE
          - PROD
      firebase_dest_env:
        description: 'Firebase Destination Environment'
        required: true
        type: choice
        options:
           - STAGE
           - PROD

jobs:
  set_env:
    runs-on: ubuntu-latest
    outputs:
      auth0_import_permission: ${{ steps.set_vars.outputs.auth0_import_permission }}
      auth0_import_users: ${{ steps.set_vars.outputs.auth0_import_users }}
      auth0_delete_users_before_import: ${{ steps.set_vars.outputs.auth0_delete_users_before_import }}
      auth0_sync_tenant: ${{ steps.set_vars.outputs.auth0_sync_tenant }}
      firebase_sync_rc: ${{ steps.set_vars.outputs.firebase_sync_rc }}
      auth0_source_tenant: ${{ steps.set_vars.outputs.auth0_source_tenant }}
      auth0_dest_tenant: ${{ steps.set_vars.outputs.auth0_dest_tenant }}
      firebase_source_env: ${{ steps.set_vars.outputs.firebase_source_env }}
      firebase_dest_env: ${{ steps.set_vars.outputs.firebase_dest_env }}
      input_file: Application_Access_Management.xlsx
      doppler_project: nabarun_tools
      doppler_service_token_source_a0: ${{ steps.set_vars.outputs.doppler_service_token_source_a0 }}
      doppler_service_token_dest_a0: ${{ steps.set_vars.outputs.doppler_service_token_dest_a0 }}
    steps:
      - name: Set Global Variables
        id: set_vars
        run: |
          {
            echo "auth0_import_permission=${{ github.event.client_payload.auth0_import_permission || inputs.auth0_import_permission }}"
            echo "auth0_import_users=${{ github.event.client_payload.auth0_import_users || inputs.auth0_import_users }}"
            echo "auth0_delete_users_before_import=${{ github.event.client_payload.auth0_delete_users_before_import || inputs.auth0_delete_users_before_import }}"
            echo "auth0_sync_tenant=${{ github.event.client_payload.auth0_sync_tenant || inputs.auth0_sync_tenant }}"
            echo "firebase_sync_rc=${{ github.event.client_payload.firebase_sync_rc || inputs.firebase_sync_rc }}"
            echo "auth0_source_tenant=${{ github.event.client_payload.auth0_source_tenant || inputs.auth0_source_tenant }}"
            echo "auth0_dest_tenant=${{ github.event.client_payload.auth0_dest_tenant || inputs.auth0_dest_tenant }}"
            echo "firebase_source_env=${{ github.event.client_payload.firebase_source_env || inputs.firebase_source_env }}"
            echo "firebase_dest_env=${{ github.event.client_payload.firebase_dest_env || inputs.firebase_dest_env }}"
            
            # auth0 
            if [[ "$auth0_source_tenant" == "PROD" ]]; then
              echo "doppler_service_token_source_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_PROD"
            elif [[ "$auth0_source_tenant" == "STAGE" ]]; then
              echo "doppler_service_token_source_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_STAGE"
            else
              echo "doppler_service_token_source_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_DEV"
            fi

            if [[ "$auth0_dest_tenant" == "PROD" ]]; then
              echo "doppler_service_token_dest_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_PROD"
            elif [[ "$auth0_dest_tenant" == "STAGE" ]]; then
              echo "doppler_service_token_dest_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_STAGE"
            else
              echo "doppler_service_token_dest_a0=secrets.DOPPLER_TOKEN_NABARUN_TOOLS_DEV"
            fi
            
          } >> $GITHUB_OUTPUT

  import_data:
    name: 'Import Data'
    needs: set_env
    if: ${{ needs.set_env.outputs.auth0_import_permission == 'true' || needs.set_env.outputs.auth0_import_users == 'true' }}
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Auth0-Import.yml@main
    with:
      branch_name: 'main'
      source: 'google_drive'
      auth0_import_tenant: ${{ needs.set_env.outputs.auth0_dest_tenant }}
      input_file: ${{ needs.set_env.outputs.input_file }}
      import_data: ${{ needs.set_env.outputs.auth0_import_permission }}
      import_user: ${{ needs.set_env.outputs.auth0_import_users }}
      delete_old_user: ${{ needs.set_env.outputs.auth0_delete_users_before_import }}
      doppler_project: ${{ needs.set_env.outputs.doppler_project }}
    secrets:
      doppler_service_token: ${{ needs.set_env.outputs.doppler_service_token_dest_a0 }}
      gcp_service_account: ${{ secrets.GCP_SA_KEY_STAGE }}

  sync_data_auth0:
    name: 'Sync Data - Auth0'
    needs: set_env
    if: ${{ needs.set_env.outputs.auth0_sync_tenant == 'true' }}
    uses: nabarun-ngo/ngo-nabarun-templates/.github/workflows/Auth0-Sync.yml@main
    with:
      branch_name: 'main'
      auth0_source_tenant: ${{ needs.set_env.outputs.auth0_source_tenant }}
      auth0_dest_tenant: ${{ needs.set_env.outputs.auth0_dest_tenant }}
      doppler_project: ${{ needs.set_env.outputs.doppler_project }}
    secrets:
      doppler_service_token_source: ${{ needs.set_env.outputs.doppler_service_token_source_a0 }}
      doppler_service_token_dest: ${{ needs.set_env.outputs.doppler_service_token_dest_a0 }}
       
